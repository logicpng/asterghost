//---------------------------Anchors and OnTranslate--------------------------

//--OnTranslate

//As I said above, OnTranslate filters through all the text your ghost displays and does whatever you specify to it. That doesn't have to just be turning things into links, it could be anything. This is a powerful function that can be used in a lot of creative ways I bet, but I wouldn't mess with it too much since you can pretty easily break stuff if you don't know what you're doing.
//If you're not interested in any anchor words, delete all the lines that start with _talk = REPLACE under OnTranslate.

OnTranslate
	{
		_talk = reference0
		_talk = REPLACE(_talk, "Options", "\_a[options]Options\_a")
		_talk = REPLACE(_talk, "Utilities", "\_a[utilities]Utilities\_a")
		_talk = REPLACE(_talk, "TerraByte", "\f[bold,1]\f[color,#275453]TerraByte\f[default]")
		//_talk = REPLACE(_talk, "Aster", "\f[color,#275453]Aster\f[default]")
		_talk = REPLACE(_talk, "Rigel", "\f[color,#C94948]Rigel\f[default]")
		_talk = REPLACE(_talk, "Altair", "\f[color,#C94948]Altair\f[default]")
		_talk = REPLACE(_talk, "Vega", "\f[color,#2D418E]Vega\f[default]")

		if keroAutoCorrect == 1 && reference2 != "OnFirstBoot"; _talk = REPLACE(_talk,"\1","\1\![get,property,OnCoordSakura,currentghost.scope0.rect]\![get,property,OnCoordKero,currentghost.scope0.rect]\![embed,OnCorrectKero]",1) //see below. also do a replacement only on the first \1 in the string

		if noVibrate == 1 //if user disables rigel's visual vibration the related interval tags get eaten
		{
			_talk = REPLACE(_talk, "\i[60]", "")
			_talk = REPLACE(_talk, "\i[61]", "")
			_talk = REPLACE(_talk, "\i[62]", "")
		}
		
		if reference1 == "" && reference2 == "" { //send input box : no event (ref2) , no special flag (ref1)
			EVAL('"' + REPLACE(_talk,'"','" + CHR(0x22) + "') + '"')
		}
		else { //event result from ghost
			TOSTR(_talk)
		}
	}

//turns out there's a much easier way to pull from property system. this was almost going to use window_info.dll but it's definitely better if it can be done without saori. much thanks to zi for clueing me in!
OnCoordSakura
{
	astCoord = reference0
}

OnCoordKero
{
	keroCoord = reference0
}

OnCorrectKero //should return a Move command. side panel is almost always invisible, making it tricky to make sure the panel appears next to aster at all times
{
	_sideX = 0
	_sideY = 0 //coordinates of the side panel

	//Value2: Window coordinates (left, top, right, bottom)
	_sideX = TOINT(keroCoord[0]) + TOINT(keroCoord[2]) / 2

	_astX = (TOINT(astCoord[0]) + TOINT(astCoord[2])) /2 //aster's horisontal coord
	_astY = (TOINT(astCoord[1]) + TOINT(astCoord[3])) /2 //vertical coord, will only be needed for moving side panel

	//important thing of note is that the coordinates are relative to the PRIMARY window, meaning if your secondary display is to the left the coordinates can very easily be negative, and to the right can go way beyound your display actual width

	//so what we do now is check if aster is reasonably close to the right or left edges of the screen
	//no real need to consider multiple screens as the worst that'll happen is that they'll cross the intersection of the screen

	//calculate middle point of the screen (function in etc.dic)
	_screenMid = displaywidth / 2
	
	//setting side panel X coordinate
	//(!) scale variable from OnShellScale
	if !ISVAR('scale'); scale = 100
	//if aster is in the left half of the screen, side panel will appear to the right of Aster
	if _astX < _screenMid; _sideX = _astX + ( 250 * scale / 100 )
	//if aster is in the right half of the screen, side panel will appear to the left of Aster
	elseif _astX >= _screenMid; _sideX = _astX - ( 250 * scale / 100 )
	
	//side panel should be slightly lower than aster's center
	_sideY = _astY + ( 90 * scale / 100 )

	//resulting string
	"\![move,--X=%(_sideX),--Y=%(_sideY),--base=primaryscreen,--move-offset=center.center]"

	ERASEVAR('astCoord') //no longer necessary
	ERASEVAR('keroCoord')
}
	
//--OnAnchorSelect
//OnAnchorSelect runs whenever someone clicks one of the links as specified above, or a link that begins with http://.

OnAnchorSelect
{
	if "http://" _in_ reference0 || "https://" _in_ reference0 //checking to see if the link is a web address
	{
	"\j[%(reference0)]\e" // \j is a tag that will open a specified url in the user's browser of choice. This basically just tells the ghost to open the webpage stored in reference0, which would be the address that the user just clicked. I didn't get too much into \j in the walkthrough page because I have literally never used it except here.
	}
	else //if it's NOT a web address
	{
	case reference0 //case is a unique thing that only really shows up in anchor.dic, and it basically sets up reference0 for evaluation to see if matches any of the below criteria, which are all tagged with when. You can read more about this on the coding page on the walkthrough site. You can add as many things here as you want to set up above as long as you follow the basic format.
		{
			when "options"; TalkConfig //if the link is this value
			when "utilities"; UtilityMenu //if the link is this value
			//a link from vega's random dialogue, stage 2
			when "system32"; "\![open,explorer,C:/Windows/System32]\w8\w8\w8\0\s[21]\i[12]Do you see?\w8\w8 There's so much...\w8\w8\n[150]\0\s[20]\i[7]Bad structure,\w8 too many files.\w8\w8\0\s[23] I want to organize it.\w8\w8\n[150]\0\s[20]\i[10]\i[8]But,\w8 then it'll break.\w8\w8 \0\s[20]\i[10]\i[7]Annoying..."
		}
	}
}

//This bit of code is what makes menu options that don't start with On direct to Select.options instead. Remove or comment it if you prefer!
OnChoiceSelect
{
	EVAL("Select.%(reference0)")
}